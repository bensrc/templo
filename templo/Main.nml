/*
 *  Templo compiler
 *  Copyright (c)2008 Motion-Twin
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 2.1 of the License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License or the LICENSE file for more details.
 */
open Templo.Ast;

function report(msg,p) {
	if p == Lexer.null_pos then	{
		Stack.dump IO.stderr Stack.exc();
		IO.printf IO.stderr "Exception : %s\n" msg
	} else
	IO.printf IO.stderr "%s:%d: %s\n" (Lexer.source p,Lexer.line p,msg);
	Sys.exit(-1);
}

function rec open_file(paths,file) {
	match paths {
	| [] -> error ("File not found " + file)
	| d :: paths -> try IO.read_file (d+file) true catch { _ -> open_file paths file }
	}
}

function parse(file,ch) {
	var lex = Lexer.create Buffer.create();
	Lexer.input lex file ch 1 0;
	var el = Templo.Parser.parse lex;
	IO.close_in ch;
	el
}

function complete_path(p) {
	var len = String.length p;
	if len > 0 && String.get p (len - 1) != '/' && String.get p (len - 1) != '\\' then
		p + "/"
	else
		p
}

try {
	var head = "Temploc v2.1 - (c)2008-2009 Motion-Twin\nUsage : temploc [options] <files>";
	var files = &[];
	var paths = &[""];
	var output = &"";
	var target = &Templo.Neko.generate;
	var debug = &false;
	var xml = &false;
	var chk = Templo.Checker.init();
	var macros = &[];
	var compares = &[];
	var decl = [
		("-cp",Args.String (function(p) paths := p :: *paths),"<dir> : add file search path");
		("-output",Args.String (function(o) output := complete_path o),"<dir> : specify output directory");
		("-macros",Args.String (function(f) macros := f :: *macros),"<file> : add macro definition file");
		("-php",Args.Void (function() target := Templo.Php.generate),": use php output");
		("-debug",Args.Void (function() debug := true),": use debug mode");
		("-xml",Args.Void (function() xml := true),": don't use XHTML checks");
		("-compare",Args.String (function(str) {
			target := function(_,_,_) {}
			match String.split str "@" {
			| [a;b] -> compares := (a,b) :: *compares;
			| _ -> error ("Invalid comparison pattern : " + str);
			}
		}),"<file1@file2> : compare two files or directories structurally");
	];
	Args.parse head decl (function(file) files := file :: *files);
	// remove all macros that are also in files
	files := List.fold (function(acc,file) List.filter (function(f) f != file) acc) (*files) (*macros);
	function is_xml(file) {
		*xml || String.lowercase (Sys.extension file) == "xml"
	}
	function compile(file,macro) {
		var el = parse file open_file(*paths,file);
		var el = if macro then Templo.Checker.add_macros chk file el else el;
		var el, deps = Templo.Checker.run chk is_xml(file) el;
		(file,el,deps)
	}
	var macros = List.map (function(file) compile(file,true)) List.rev(*macros);
	var files = List.map (function(file) compile(file,false)) List.rev(*files);
	List.iter (function((a,b)) {
		var macros = List.concat (List.map (function((_,el,_)) {
			List.map (function(e)
				match fst e {
				| XMacroDef m -> m
				| _ -> assert()
				}
			) el
		}) macros);
		Templo.Compare.init (*debug) macros;
		Templo.Compare.compare a b (function(f) { var _,el,_ = compile f false; el }) IO.stdout
	}) List.rev(*compares);
	var datas = List.append macros files;
	(*target) (*output) (*debug) datas;
} catch {
	| Templo.Lexer.Error(msg,pos) -> report Templo.Lexer.error_msg(msg) pos
	| Templo.Parser.Error(msg,pos) -> report Templo.Parser.error_msg(msg) pos
	| Templo.Checker.Error(msg,pos) -> report msg pos
	| Error msg ->
		IO.printf IO.stderr "%s\n" msg;
		Sys.exit(-1)
	| e ->
		Stack.dump IO.stderr Stack.exc();
		IO.printf IO.stderr "Exception : %s\n" string(e);
		Sys.exit (-1);
}
